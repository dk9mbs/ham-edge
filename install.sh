#!/bin/bash

HOMEDIR="/home/pi"
SCRIPT=$(readlink -f $0)
BASEDIR=$(dirname $SCRIPT)
WSJTXVERSION="wsjtx-2.6.1"

echo "BASEDIR...................:$BASEDIR"

#sudo bash -c 'apt-get update && apt-get -y upgrade'
sudo apt-get install -y openvpn mycli default-mysql-client xvnc4viewer x11vnc quisk \
gqrx-sdr qsstv rtl-sdr \
xdx xlog libhamlib-utils grig gpredict \
libasound2-dev libopus-dev locales-all

sudo dpkg-reconfigure locales

#
# Install python venv and current pip 
#
sudo pip3 install --upgrade pip
#
# now lets install venv
#
pip3 install virtenv
mkdir -p ~/venv
python3.7 -m venv ~/restapi

#
#	
#
sudo usermod -a -G dialout pi
sudo mkdir -p /etc/openvpn/easy-rsa/keys/
mkdir -p $HOMEDIR/.config/autostart

#
# Show Linenumbers in nano by default
#
cat > "~/.nanorc" << EOF
set linenumbers

EOF

#
# install rc.local
#
sudo bash -c 'cat > "/etc/rc.local" << EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# Print the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
  printf "My IP address is %s\n" "$_IP"
fi

rigctld -m 120 -r /dev/ttyUSB0 -s 9600 &

exit 0
EOF'



sudo cp $BASEDIR/quisk_hardware_fifisdr.py /usr/bin/


sudo bash -c 'cat > "/etc/openvpn/clinent.conf" << EOF
client
dev tun
port 1194
proto udp

remote vpn.host.de 1194
nobind

ca /etc/openvpn/easy-rsa/keys/ca.crt
cert /etc/openvpn/easy-rsa/keys/iotcloud.crt
key /etc/openvpn/easy-rsa/keys/iotcloud.key

comp-lzo
persist-key
persist-tun

verb 3
EOF'

sudo bash -c 'cat > "/etc/modprobe.d/sndloop.conf" << EOF
#options snd-usb-audio index=4,5 vid=0x16c0,0x1234 pid=0x05dc,0x0815
#options snd-aloop index=5,6 pcm_substreams=2,2 id=quisk,gqrx

options snd-usb-audio index=4 vid=0x16c0,0x1234 pid=0x05dc,0x0815
options snd-aloop pcm_substreams=2 index=5
EOF'

sudo bash -c 'cat > "/etc/modules-load.d/sndloop.conf" << EOF
snd-aloop
EOF'

#
# Openvpn default config
#
sudo bash -c 'cat > "/etc/udev/rules.d/fifi.rules" << EOF
ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="05dc", GROUP="plugdev"
EOF'

sudo bash -c 'cat > "/etc/default/openvpn" << EOF
#
# Generated by install_raspi.sh! Do not Change here!
#
# This is the configuration file for /etc/init.d/openvpn

#
# Start only these VPNs automatically via init script.
# Allowed values are "all", "none" or space separated list of
# names of the VPNs. If empty, "all" is assumed.
# The VPN name refers to the VPN configutation file name.
# i.e. "home" would be /etc/openvpn/home.conf
#
# If youre running systemd, changing this variable will
# require running "systemctl daemon-reload" followed by
# a restart of the openvpn service (if you removed entries
# you may have to stop those manually)
#
AUTOSTART="all"
#AUTOSTART="none"
#AUTOSTART="home office"
#AUTOSTART="client"

#
# WARNING: If youre running systemd the rest of the
# options in this file are ignored.
#
# Refresh interval (in seconds) of default status files
# located in /var/run/openvpn.$NAME.status
# Defaults to 10, 0 disables status file generation
#
#STATUSREFRESH=10
#STATUSREFRESH=0
# Optional arguments to openvpns command line
OPTARGS=""
#
# If you need openvpn running after sendsigs, i.e.
# to let umountnfs work over the vpn, set OMIT_SENDSIGS
# to 1 and include umountnfs as Required-Stop: in openvpns
# init.d script (remember to run insserv after that)
#
OMIT_SENDSIGS=0

EOF'


cat > "$HOMEDIR/.quisk_conf.py" << EOF
#
# Generated automaticly by install_raspi.sh
#

# This is a sample quisk_conf.py configuration file for a soundcard.

# Please do not change this sample file.
# Instead copy it to your own .quisk_conf.py and make changes there.
# See quisk_conf_defaults.py for more information.

# The default hardware module was already imported.  Import a different one here.
# import quisk_hardware_fixed as quisk_hardware

# In ALSA, soundcards have these names.  The "hw" devices are the raw
# hardware devices, and should be used for soundcard capture.
#name_of_sound_capt = "hw:0"
#name_of_sound_capt = "hw:1"
#name_of_sound_capt = "plughw"
#name_of_sound_capt = "plughw:1"
#name_of_sound_capt = "default"

# Pulseaudio support added by Philip G. Lee.  Many thanks!
# For PulseAudio support, use the name "pulse" and connect the streams
# to your hardware devices using a program like pavucontrol
#name_of_sound_capt = "pulse"

import quisk_hardware_fifisdr as quisk_hardware

sample_rate = 96000					# ADC hardware sample rate in Hertz
name_of_sound_capt = "hw:4,0"			# Name of soundcard capture hardware device.
name_of_sound_play = "hw:5,1"		# Use the same device for play back
channel_i = 0						# Soundcard index of in-phase channel:  0, 1, 2, ...
channel_q = 1						# Soundcard index of quadrature channel:  0, 1, 2, ...

hamlib_port = 4532		# Default port for rig 2.  Use this if you can not set the Hamlib port.
EOF

#
# Update the system
#
sudo apt-get update
sudo apt-get -y upgrade
#
# Install all dependencies they need by wsjtx
#
sudo apt-get install -y git 
sudo apt-get install -y cmake
sudo apt-get install -y automake
sudo apt-get install -y libtool
sudo apt-get install -y asciidoctor
sudo apt-get install -y asciidoc
sudo apt-get install -y gfortran
sudo apt-get install -y subversion
sudo apt-get install -y libwxgtk3.0-dev
sudo apt-get install -y libusb-1.0-0-dev
sudo apt-get install -y portaudio19-dev
sudo apt-get install -y libsamplerate0-dev
sudo apt-get install -y libasound2-dev
sudo apt-get install -y libao-dev
sudo apt-get install -y libfftw3-dev
sudo apt-get install -y libgsm1-dev
sudo apt-get install -y libjpeg9-dev
sudo apt-get install -y libxft-dev
sudo apt-get install -y libxinerama-dev
sudo apt-get install -y libxcursor-dev
sudo apt-get install -y libboost-all-dev
sudo apt-get install -y libqt5multimedia5
sudo apt-get install -y libqt5multimedia5-plugins
sudo apt-get install -y libqt5multimediaquick-p5
sudo apt-get install -y libqt5multimediawidgets5
sudo apt-get install -y libqt5serialport5-dev
sudo apt-get install -y libqt5svg5-dev
sudo apt-get install -y libqt5widgets5
sudo apt-get install -y libqt5sql5-sqlite
sudo apt-get install -y libqwt-qt5-dev
sudo apt-get install -y libsndfile1-dev
sudo apt-get install -y libudev-dev
sudo apt-get install -y qtmultimedia5-dev
sudo apt-get install -y texinfo
sudo apt-get install -y xsltproc
sudo apt-get install -y swig
sudo apt-get install -y default-jdk
sudo apt-get install -y svxlink-server svxlink-gpio svxlink-calibration-tools
sudo apt-get install -y sox
sudo apt-get install python-rpi.gpio
sudo apt-get install libgfortran3

sudo apt-get install -y cmake automake libtool libhamlib-dev qt5-default libqt5multimedia5 libqt5serialport5-dev libfftw3-single3 \
libgusb-dev texi2html texinfo libfftw3-dev qttools5-dev qttools5-dev-tools \
libqt5svg5-dev qtmultimedia5-dev asciidoctor libudev-dev qttools5-dev qttools5-dev-tools \
qtbase5-dev-tools

#
# Install tuxLog
# Deprecated use pytuxlog
#
#if [ ! -d $HOMEDIR/tuxlog ]
#then
#cd $HOMEDIR
# git clone https://github.com/dk9mbs/tuxlog.git
#fi

#cd $HOMEDIR/tuxlog
#git pull

#
# Install wsjtx from sources
#
wget -O $BASEDIR/$WSJTXVERSION.tgz https://wsjt.sourceforge.io/downloads/$WSJTXVERSION.tgz

WSJTXBUILDDIR=$BASEDIR/wsjtx_build
cd $BASEDIR
tar -xzvf $WSJTXVERSION.tgz
mkdir -p $WSJTXBUILDDIR
cd $WSJTXBUILDDIR
cmake $BASEDIR/$WSJTXVERSION/
#make
#sudo make install


#
# Install node-red and npm
# https://nodered.org/docs/getting-started/raspberrypi
#
#sudo bash <(curl -sL https://raw.githubusercontent.com/#node-red/linux-installers/master/deb/update-nodejs-and-#nodered)

#
# autoremove
#
sudo apt-get -y autoremove

echo "Install language pack for svxlink"
sudo mkdir /usr/share/svxlink/sounds/en_US
cd /tmp
sudo bash filter_sounds.sh ./svx/svxlink-sounds-en_US-heather-13.12.1 /usr/share/svxlink/sounds/en_US


echo "####################################################################"
echo "# TODO                                                             #"
echo "# ----                                                             #"
echo "# -Run make and make install in $WSJTXBUILDDIR for install wsjtx!  "
echo "# -Execute 'x11vnc -usepw -forever -display :0' to set a password  #"
echo "####################################################################"
